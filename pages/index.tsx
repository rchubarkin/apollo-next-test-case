import Head from "next/head";
import { initializeApollo, launchesQuery } from "@/gql";

import { useQuery } from "@apollo/client";
import { useState } from "react";
import { Button, LaunchCard, LaunchListMeta } from "@/components";
import { GetServerSidePropsContext } from "next";
import { useRouter } from "next/router";
import { ParsedUrlQuery } from "querystring";

const INITIAL_PAGE_SIZE = 2;
const PAGE_SIZE = 10;

export default function Home() {
  const [page, nextPage] = usePagingParams();
  const [loading, setLoading] = useState(false);
  const [canLoadMore, setCanLoadMore] = useState(true);
  const { data, fetchMore } = useQuery(launchesQuery, {
    variables: page,
  });
  const loadMore = async () => {
    setLoading(true);

    const next = nextPage();

    const result = await fetchMore({
      variables: next,
    });

    if ((result.data.launches?.length ?? 0) < next.limit) {
      setCanLoadMore(false);
    }

    setLoading(false);
  };
  return (
    <>
      <Head>
        <title>SpaceX Launches</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {(data?.launches?.length ?? 0) > 0 && <LaunchListMeta />}

      {data?.launches?.map((launch) => (
        <LaunchCard key={launch?.id!} className="mb-4" launch={launch!} />
      ))}

      {canLoadMore && (
        <Button disabled={loading} fullWidth onClick={loadMore}>
          {loading ? "Loading..." : "More"}
        </Button>
      )}
    </>
  );
}

export async function getServerSideProps({ query }: GetServerSidePropsContext) {
  const apolloClient = initializeApollo();
  const { limit, offset } = getPagingParams(query);

  await apolloClient.query({
    query: launchesQuery,
    variables: {
      limit,
      offset,
    },
  });

  return {
    props: {
      initialApolloState: apolloClient.cache.extract(),
    },
  };
}

function getPagingParams(rawQuery: ParsedUrlQuery) {
  return {
    limit: Number(rawQuery.limit || INITIAL_PAGE_SIZE),
    offset: Number(rawQuery.offset || 0),
  };
}

function usePagingParams() {
  const { query } = useRouter();
  const [pagingParams, setPagingParams] = useState(() =>
    getPagingParams(query)
  );

  function nextPage() {
    const next = {
      offset: pagingParams.offset + pagingParams.limit,
      limit: PAGE_SIZE,
    };
    setPagingParams(next);
    return next;
  }

  return [pagingParams, nextPage] as const;
}
